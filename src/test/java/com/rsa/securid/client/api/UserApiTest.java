/*
 * RSA SecurID Authentication API
 * This defines the RSA SecurID Authentication API. This supports a REST interface to perform multi-factor, multi-step authentications. The caller must invoke the Initialize interface to start an authentication attempt and call the Verify method until the ResponseCode is either SUCCESS, ERROR, or FAIL. Each server response contains CredentialMethods, one of which must be provided in the subjectCredentials of the next Verify call. The server verifies the entered credentials and responds with CHALLENGE or IN_PROCESS if additional information (or confirmations) are required to complete the authentication. The IN_PROCESS status is returned for authentication steps that may take a lot of time. The caller should invoke the Verify call again using the same referenceID to 'poll' on the result of a previous IN_PROCESS authentication. Alternatively, Verify responds with SUCCESS if all required authentication credentials have been provided, FAIL if the verification of a credential failed, or ERROR for malformed requests.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rsa.securid.client.api;

import com.rsa.securid.client.api.UserApi;
import com.rsa.securid.client.ApiException;
import com.rsa.securid.client.model.AuthNResponse;
import com.rsa.securid.client.model.AuthNStatusResponse;
import com.rsa.securid.client.model.Cancel;
import com.rsa.securid.client.model.CheckStatus;
import com.rsa.securid.client.model.Initialize;
import com.rsa.securid.client.model.Verify;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Cancels a previously initialized authentication.
     *
     * This request should be used when the client wants to explicitly cancel an authentication attempt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelTest() throws ApiException {
        Cancel cancelParams = null;
        AuthNResponse response = api.cancel(cancelParams);

        // TODO: test validations
    }
    
    /**
     * Initialize an authentication attempt.
     *
     * This request should be used when the client wants to start an authentication attempt. This calls returns an \&quot;authnAttemptId\&quot; in the \&quot;AuthnResponse:ResponseContext\&quot; that will be used to identify the attempt in subsequent calls.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initializeTest() throws ApiException {
        Initialize initializeParams = null;
        AuthNResponse response = api.initialize(initializeParams);

        // TODO: test validations
    }
    
    /**
     * Checks status of initialized authentication.
     *
     * This is called by a subsequent session to be able to check or verify a previous authentication result. The \&quot;CheckStatus\&quot; request contains a \&quot;authnAttemptId\&quot; from a previous successful authentication. By default, this interface can be called once (see \&quot;CheckStatus\&quot; definition).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statusTest() throws ApiException {
        CheckStatus statusParams = null;
        AuthNStatusResponse response = api.status(statusParams);

        // TODO: test validations
    }
    
    /**
     * Verify authentication credentials.
     *
     * This request should be used when the client wants to provide authentication credentials (i.e., a password, an OTP, etc.) in association with a previously initialized authentication attempt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyTest() throws ApiException {
        Verify verifyParams = null;
        AuthNResponse response = api.verify(verifyParams);

        // TODO: test validations
    }
    
}
