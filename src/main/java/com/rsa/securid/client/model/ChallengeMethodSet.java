/*
 * RSA SecurID Authentication API
 * This defines the RSA SecurID Authentication API. This supports a REST interface to perform multi-factor, multi-step authentications. The caller must invoke the Initialize interface to start an authentication attempt and call the Verify method until the ResponseCode is either SUCCESS, ERROR, or FAIL. Each server response contains CredentialMethods, one of which must be provided in the subjectCredentials of the next Verify call. The server verifies the entered credentials and responds with CHALLENGE or IN_PROCESS if additional information (or confirmations) are required to complete the authentication. The IN_PROCESS status is returned for authentication steps that may take a lot of time. The caller should invoke the Verify call again using the same referenceID to 'poll' on the result of a previous IN_PROCESS authentication. Alternatively, Verify responds with SUCCESS if all required authentication credentials have been provided, FAIL if the verification of a credential failed, or ERROR for malformed requests.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rsa.securid.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.rsa.securid.client.model.AuthenticationMethod;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * An array of challenge methods all of which must be completed. There may be only one item in the \&quot;requiredMethods\&quot;. The client must complete at least one of the requiredMethods before calling \&quot;verify\&quot;.
 */
@ApiModel(description = "An array of challenge methods all of which must be completed. There may be only one item in the \"requiredMethods\". The client must complete at least one of the requiredMethods before calling \"verify\".")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-11T15:33:28.173Z")
public class ChallengeMethodSet {
  @SerializedName("methodSetId")
  private String methodSetId = null;

  @SerializedName("requiredMethods")
  private List<AuthenticationMethod> requiredMethods = new ArrayList<AuthenticationMethod>();

  public ChallengeMethodSet methodSetId(String methodSetId) {
    this.methodSetId = methodSetId;
    return this;
  }

   /**
   * Unique ID of the Authentication method set provided by the server for convenience. It allows the client to differentiate each set of the required challenge methods during an authentication attempt.
   * @return methodSetId
  **/
  @ApiModelProperty(value = "Unique ID of the Authentication method set provided by the server for convenience. It allows the client to differentiate each set of the required challenge methods during an authentication attempt.")
  public String getMethodSetId() {
    return methodSetId;
  }

  public void setMethodSetId(String methodSetId) {
    this.methodSetId = methodSetId;
  }

  public ChallengeMethodSet requiredMethods(List<AuthenticationMethod> requiredMethods) {
    this.requiredMethods = requiredMethods;
    return this;
  }

  public ChallengeMethodSet addRequiredMethodsItem(AuthenticationMethod requiredMethodsItem) {
    this.requiredMethods.add(requiredMethodsItem);
    return this;
  }

   /**
   * Get requiredMethods
   * @return requiredMethods
  **/
  @ApiModelProperty(required = true, value = "")
  public List<AuthenticationMethod> getRequiredMethods() {
    return requiredMethods;
  }

  public void setRequiredMethods(List<AuthenticationMethod> requiredMethods) {
    this.requiredMethods = requiredMethods;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChallengeMethodSet challengeMethodSet = (ChallengeMethodSet) o;
    return Objects.equals(this.methodSetId, challengeMethodSet.methodSetId) &&
        Objects.equals(this.requiredMethods, challengeMethodSet.requiredMethods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(methodSetId, requiredMethods);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChallengeMethodSet {\n");
    
    sb.append("    methodSetId: ").append(toIndentedString(methodSetId)).append("\n");
    sb.append("    requiredMethods: ").append(toIndentedString(requiredMethods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

