/*
 * RSA SecurID Authentication API
 * This defines the RSA SecurID Authentication API. This supports a REST interface to perform multi-factor, multi-step authentications. The caller must invoke the Initialize interface to start an authentication attempt and call the Verify method until the ResponseCode is either SUCCESS, ERROR, or FAIL. Each server response contains CredentialMethods, one of which must be provided in the subjectCredentials of the next Verify call. The server verifies the entered credentials and responds with CHALLENGE or IN_PROCESS if additional information (or confirmations) are required to complete the authentication. The IN_PROCESS status is returned for authentication steps that may take a lot of time. The caller should invoke the Verify call again using the same referenceID to 'poll' on the result of a previous IN_PROCESS authentication. Alternatively, Verify responds with SUCCESS if all required authentication credentials have been provided, FAIL if the verification of a credential failed, or ERROR for malformed requests.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rsa.securid.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * A response status code representation. SUCCESS - The authentication is completed successfully. IN_PROCESS - The authentication is not complete but remains in-process. For some OOB (PUSH) methods, the client must retry with verification \&quot;verify\&quot; call. For APPROVE method, we will receive IN_PROCESS status , and \&quot;APPROVE_CHECK\&quot; as method in \&quot;challengeMethods\&quot; field CHALLENGE - The method is incomplete and method(s) in the \&quot;challengeMethods\&quot; are required. For example, the \&quot;challengeMethods\&quot; may contain data requiring the client to perform a secondary challenge. ERROR - A technical error occurred in processing the client request. The authnAttemptId is no longer valid. FAIL - The \&quot;credentials\&quot; presented were incorrect. means that a user failed authentication in this attempt
 */
@JsonAdapter(ResponseCode.Adapter.class)
public enum ResponseCode {
  
  SUCCESS("SUCCESS"),
  
  FAIL("FAIL"),
  
  ERROR("ERROR"),
  
  CHALLENGE("CHALLENGE"),
  
  IN_PROCESS("IN_PROCESS");

  private String value;

  ResponseCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ResponseCode fromValue(String text) {
    for (ResponseCode b : ResponseCode.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<ResponseCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final ResponseCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ResponseCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ResponseCode.fromValue(String.valueOf(value));
    }
  }
}

