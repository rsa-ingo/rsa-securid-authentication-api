/*
 * RSA SecurID Authentication API
 * This defines the RSA SecurID Authentication API. This supports a REST interface to perform multi-factor, multi-step authentications. The caller must invoke the Initialize interface to start an authentication attempt and call the Verify method until the ResponseCode is either SUCCESS, ERROR, or FAIL. Each server response contains CredentialMethods, one of which must be provided in the subjectCredentials of the next Verify call. The server verifies the entered credentials and responds with CHALLENGE or IN_PROCESS if additional information (or confirmations) are required to complete the authentication. The IN_PROCESS status is returned for authentication steps that may take a lot of time. The caller should invoke the Verify call again using the same referenceID to 'poll' on the result of a previous IN_PROCESS authentication. Alternatively, Verify responds with SUCCESS if all required authentication credentials have been provided, FAIL if the verification of a credential failed, or ERROR for malformed requests.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rsa.securid.client.api;

import com.rsa.securid.client.ApiCallback;
import com.rsa.securid.client.ApiClient;
import com.rsa.securid.client.ApiException;
import com.rsa.securid.client.ApiResponse;
import com.rsa.securid.client.Configuration;
import com.rsa.securid.client.Pair;
import com.rsa.securid.client.ProgressRequestBody;
import com.rsa.securid.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.rsa.securid.client.model.AuthNResponse;
import com.rsa.securid.client.model.AuthNStatusResponse;
import com.rsa.securid.client.model.Cancel;
import com.rsa.securid.client.model.CheckStatus;
import com.rsa.securid.client.model.Initialize;
import com.rsa.securid.client.model.Verify;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient apiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancel
     * @param cancelParams  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelCall(Cancel cancelParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cancelParams;

        // create path and map variables
        String localVarPath = "/authn/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "client-key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelValidateBeforeCall(Cancel cancelParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cancelParams' is set
        if (cancelParams == null) {
            throw new ApiException("Missing the required parameter 'cancelParams' when calling cancel(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelCall(cancelParams, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancels a previously initialized authentication.
     * This request should be used when the client wants to explicitly cancel an authentication attempt.
     * @param cancelParams  (required)
     * @return AuthNResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthNResponse cancel(Cancel cancelParams) throws ApiException {
        ApiResponse<AuthNResponse> resp = cancelWithHttpInfo(cancelParams);
        return resp.getData();
    }

    /**
     * Cancels a previously initialized authentication.
     * This request should be used when the client wants to explicitly cancel an authentication attempt.
     * @param cancelParams  (required)
     * @return ApiResponse&lt;AuthNResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthNResponse> cancelWithHttpInfo(Cancel cancelParams) throws ApiException {
        com.squareup.okhttp.Call call = cancelValidateBeforeCall(cancelParams, null, null);
        Type localVarReturnType = new TypeToken<AuthNResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancels a previously initialized authentication. (asynchronously)
     * This request should be used when the client wants to explicitly cancel an authentication attempt.
     * @param cancelParams  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelAsync(Cancel cancelParams, final ApiCallback<AuthNResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelValidateBeforeCall(cancelParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthNResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for initialize
     * @param initializeParams Authentication request initialization parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call initializeCall(Initialize initializeParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = initializeParams;

        // create path and map variables
        String localVarPath = "/authn/initialize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "client-key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call initializeValidateBeforeCall(Initialize initializeParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'initializeParams' is set
        if (initializeParams == null) {
            throw new ApiException("Missing the required parameter 'initializeParams' when calling initialize(Async)");
        }
        

        com.squareup.okhttp.Call call = initializeCall(initializeParams, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Initialize an authentication attempt.
     * This request should be used when the client wants to start an authentication attempt. This calls returns an \&quot;authnAttemptId\&quot; in the \&quot;AuthnResponse:ResponseContext\&quot; that will be used to identify the attempt in subsequent calls.
     * @param initializeParams Authentication request initialization parameters (required)
     * @return AuthNResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthNResponse initialize(Initialize initializeParams) throws ApiException {
        ApiResponse<AuthNResponse> resp = initializeWithHttpInfo(initializeParams);
        return resp.getData();
    }

    /**
     * Initialize an authentication attempt.
     * This request should be used when the client wants to start an authentication attempt. This calls returns an \&quot;authnAttemptId\&quot; in the \&quot;AuthnResponse:ResponseContext\&quot; that will be used to identify the attempt in subsequent calls.
     * @param initializeParams Authentication request initialization parameters (required)
     * @return ApiResponse&lt;AuthNResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthNResponse> initializeWithHttpInfo(Initialize initializeParams) throws ApiException {
        com.squareup.okhttp.Call call = initializeValidateBeforeCall(initializeParams, null, null);
        Type localVarReturnType = new TypeToken<AuthNResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initialize an authentication attempt. (asynchronously)
     * This request should be used when the client wants to start an authentication attempt. This calls returns an \&quot;authnAttemptId\&quot; in the \&quot;AuthnResponse:ResponseContext\&quot; that will be used to identify the attempt in subsequent calls.
     * @param initializeParams Authentication request initialization parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call initializeAsync(Initialize initializeParams, final ApiCallback<AuthNResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = initializeValidateBeforeCall(initializeParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthNResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for status
     * @param statusParams  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statusCall(CheckStatus statusParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = statusParams;

        // create path and map variables
        String localVarPath = "/authn/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "client-key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statusValidateBeforeCall(CheckStatus statusParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'statusParams' is set
        if (statusParams == null) {
            throw new ApiException("Missing the required parameter 'statusParams' when calling status(Async)");
        }
        

        com.squareup.okhttp.Call call = statusCall(statusParams, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Checks status of initialized authentication.
     * This is called by a subsequent session to be able to check or verify a previous authentication result. The \&quot;CheckStatus\&quot; request contains a \&quot;authnAttemptId\&quot; from a previous successful authentication. By default, this interface can be called once (see \&quot;CheckStatus\&quot; definition).
     * @param statusParams  (required)
     * @return AuthNStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthNStatusResponse status(CheckStatus statusParams) throws ApiException {
        ApiResponse<AuthNStatusResponse> resp = statusWithHttpInfo(statusParams);
        return resp.getData();
    }

    /**
     * Checks status of initialized authentication.
     * This is called by a subsequent session to be able to check or verify a previous authentication result. The \&quot;CheckStatus\&quot; request contains a \&quot;authnAttemptId\&quot; from a previous successful authentication. By default, this interface can be called once (see \&quot;CheckStatus\&quot; definition).
     * @param statusParams  (required)
     * @return ApiResponse&lt;AuthNStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthNStatusResponse> statusWithHttpInfo(CheckStatus statusParams) throws ApiException {
        com.squareup.okhttp.Call call = statusValidateBeforeCall(statusParams, null, null);
        Type localVarReturnType = new TypeToken<AuthNStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Checks status of initialized authentication. (asynchronously)
     * This is called by a subsequent session to be able to check or verify a previous authentication result. The \&quot;CheckStatus\&quot; request contains a \&quot;authnAttemptId\&quot; from a previous successful authentication. By default, this interface can be called once (see \&quot;CheckStatus\&quot; definition).
     * @param statusParams  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statusAsync(CheckStatus statusParams, final ApiCallback<AuthNStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statusValidateBeforeCall(statusParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthNStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verify
     * @param verifyParams Authentication request verification parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifyCall(Verify verifyParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = verifyParams;

        // create path and map variables
        String localVarPath = "/authn/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "client-key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifyValidateBeforeCall(Verify verifyParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'verifyParams' is set
        if (verifyParams == null) {
            throw new ApiException("Missing the required parameter 'verifyParams' when calling verify(Async)");
        }
        

        com.squareup.okhttp.Call call = verifyCall(verifyParams, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Verify authentication credentials.
     * This request should be used when the client wants to provide authentication credentials (i.e., a password, an OTP, etc.) in association with a previously initialized authentication attempt.
     * @param verifyParams Authentication request verification parameters (required)
     * @return AuthNResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthNResponse verify(Verify verifyParams) throws ApiException {
        ApiResponse<AuthNResponse> resp = verifyWithHttpInfo(verifyParams);
        return resp.getData();
    }

    /**
     * Verify authentication credentials.
     * This request should be used when the client wants to provide authentication credentials (i.e., a password, an OTP, etc.) in association with a previously initialized authentication attempt.
     * @param verifyParams Authentication request verification parameters (required)
     * @return ApiResponse&lt;AuthNResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthNResponse> verifyWithHttpInfo(Verify verifyParams) throws ApiException {
        com.squareup.okhttp.Call call = verifyValidateBeforeCall(verifyParams, null, null);
        Type localVarReturnType = new TypeToken<AuthNResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify authentication credentials. (asynchronously)
     * This request should be used when the client wants to provide authentication credentials (i.e., a password, an OTP, etc.) in association with a previously initialized authentication attempt.
     * @param verifyParams Authentication request verification parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyAsync(Verify verifyParams, final ApiCallback<AuthNResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyValidateBeforeCall(verifyParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthNResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
